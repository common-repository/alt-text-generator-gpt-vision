{"version":3,"file":"media-modal.js","mappings":"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","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///external window [\"wp\",\"i18n\"]","webpack:///./node_modules/.pnpm/ts-dom-utils@2.2.0/node_modules/ts-dom-utils/dist/chunk-X7YTDZOL.js","webpack:///external window [\"wp\",\"apiFetch\"]","webpack:///./src/constants.ts","webpack:///./src/media/media-modal.ts","webpack:///./node_modules/.pnpm/ts-dom-utils@2.2.0/node_modules/ts-dom-utils/dist/chunk-YC4DGQBN.js","webpack:///./src/media/components/GenerateAltButon.ts","webpack:///./src/utils/generateAltText.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","function l(s,i={},r=document){let e=r.createElement(s);return Object.entries(i).forEach(([n,t])=>{t!=null&&(n===\"class\"?Array.isArray(t)?e.classList.add(...t):typeof t==\"string\"&&e.classList.add(t):n===\"text\"?e.textContent=t:n in e?typeof t==\"object\"&&!Array.isArray(t)?Object.entries(t).forEach(([a,c])=>{e[n][a]=c}):e[n]=t:e.setAttribute(n,t))}),e}export{l as a};\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"apiFetch\"];","export const API_PATH = 'acpl/ai-alt-generator';\nexport const BULK_ACTION_OPTION_VALUE = 'generate_alt_text';\n","import { qs } from 'ts-dom-utils';\nimport GenerateAltButon from './components/GenerateAltButon';\n\nconst { wp } = window;\n/**\n * Add generate alt button to media modal.\n */\n// @ts-ignore - missing types for Attachment\nwp.media.view.Attachment.Details = wp.media.view.Attachment.Details.extend({\n  render: function () {\n    // @ts-ignore - missing types for Attachment\n    wp.media.view.Attachment.prototype.render.apply(this, arguments);\n\n    if (this.model.get('type') !== 'image') {\n      return this;\n    }\n\n    const { el } = this;\n    const altTextField = qs('.attachment-details .setting.alt-text', el);\n\n    if (!altTextField) return this;\n\n    const button = GenerateAltButon(\n      this.model.get('id'),\n      (altText) => {\n        this.model.set('alt', altText);\n        this.render();\n        this.model.save();\n      },\n      this.model.get('alt'),\n    );\n\n    altTextField.after(button);\n\n    return this;\n  },\n});\n","function n(e,t=document){return t.querySelector(e)}export{n as a};\n","import { __, sprintf } from '@wordpress/i18n';\nimport { createElement } from 'ts-dom-utils';\nimport generateAltText from '../../utils/generateAltText';\n\nexport default (\n  imageId: number,\n  onClick: (altText: string) => void,\n  currentAlt?: string,\n) => {\n  const buttonWrapper = createElement('div', {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'end',\n      clear: 'both',\n      gap: '1em',\n    },\n  });\n\n  const spinner = createElement('span', {\n    class: 'spinner',\n    style: { margin: '0' },\n  });\n  buttonWrapper.append(spinner);\n\n  const button = createElement('button', {\n    class: 'button',\n    text: __('Generate Alt Text', 'alt-text-generator-gpt-vision'),\n    onclick: async (e) => {\n      e.preventDefault();\n      if (\n        currentAlt?.length &&\n        !confirm(\n          __(\n            'Are you sure you want to overwrite the current alt text?',\n            'alt-text-generator-gpt-vision',\n          ),\n        )\n      ) {\n        return;\n      }\n\n      try {\n        spinner.classList.add('is-active');\n        button.disabled = true;\n\n        const altText = await generateAltText(imageId);\n        onClick(altText);\n      } catch (error) {\n        alert(\n          sprintf(\n            __(\n              'There was an error generating the alt text: %s',\n              'alt-text-generator-gpt-vision',\n            ),\n            error.message,\n          ),\n        );\n      } finally {\n        spinner.classList.remove('is-active');\n        button.disabled = false;\n      }\n    },\n  });\n  buttonWrapper.append(button);\n\n  return buttonWrapper;\n};\n","import apiFetch from '@wordpress/api-fetch';\nimport { API_PATH } from '../constants';\n\nexport default async (\n  attachmentId: number,\n  save: boolean = false,\n  userPrompt?: string,\n  signal?: AbortSignal,\n) => {\n  const requestData: {\n    attachment_id: number;\n    save: boolean;\n    user_prompt?: string;\n  } = {\n    attachment_id: attachmentId,\n    save,\n  };\n\n  if (userPrompt?.length) {\n    requestData.user_prompt = userPrompt;\n  }\n\n  return apiFetch<{ alt: string; img_id: number }>({\n    path: API_PATH,\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(requestData),\n    signal,\n  })\n    .then((response) => {\n      return response.alt;\n    })\n    .catch((error) => {\n      console.error(error);\n      throw error as WPError;\n    });\n};\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","window","l","s","i","r","document","e","createElement","entries","forEach","n","t","Array","isArray","classList","add","textContent","c","setAttribute","wp","media","view","Attachment","Details","extend","render","apply","this","arguments","model","el","altTextField","querySelector","qs","button","imageId","onClick","currentAlt","buttonWrapper","style","display","alignItems","justifyContent","clear","gap","spinner","class","margin","append","text","__","onclick","async","preventDefault","length","confirm","disabled","altText","attachmentId","save","userPrompt","signal","requestData","attachment_id","user_prompt","apiFetch","path","method","headers","body","JSON","stringify","then","response","alt","catch","error","console","generateAltText","alert","sprintf","message","remove","GenerateAltButon","set","after"],"sourceRoot":""}