{"version":3,"file":"media-edit-page.js","mappings":"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","sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/.pnpm/ts-dom-utils@2.2.0/node_modules/ts-dom-utils/dist/chunk-YC4DGQBN.js","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///external window [\"wp\",\"i18n\"]","webpack:///./node_modules/.pnpm/ts-dom-utils@2.2.0/node_modules/ts-dom-utils/dist/chunk-X7YTDZOL.js","webpack:///external window [\"wp\",\"apiFetch\"]","webpack:///./src/media/media-edit-page.ts","webpack:///./src/media/components/GenerateAltButon.ts","webpack:///./src/utils/generateAltText.ts","webpack:///./src/constants.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","function n(e,t=document){return t.querySelector(e)}export{n as a};\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","function l(s,i={},r=document){let e=r.createElement(s);return Object.entries(i).forEach(([n,t])=>{t!=null&&(n===\"class\"?Array.isArray(t)?e.classList.add(...t):typeof t==\"string\"&&e.classList.add(t):n===\"text\"?e.textContent=t:n in e?typeof t==\"object\"&&!Array.isArray(t)?Object.entries(t).forEach(([a,c])=>{e[n][a]=c}):e[n]=t:e.setAttribute(n,t))}),e}export{l as a};\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"apiFetch\"];","import { qs } from 'ts-dom-utils';\nimport GenerateAltButon from './components/GenerateAltButon';\n\n/**\n * Adds generate alt button to media edit page (/wp-admin/post.php?post=[id]&action=edit).\n */\n(function () {\n  const wrapper = qs<HTMLParagraphElement>('.attachment-alt-text');\n  if (!wrapper) {\n    return;\n  }\n\n  const textarea = qs<HTMLTextAreaElement>('textarea', wrapper);\n  if (!textarea) {\n    return;\n  }\n\n  const currentUrl = new URL(window.location.href);\n  const imageId = parseInt(currentUrl.searchParams.get('post') ?? '0');\n  if (!imageId) {\n    console.error('Image ID not found.');\n    return;\n  }\n\n  const button = GenerateAltButon(\n    imageId,\n    (altText) => {\n      textarea.value = altText;\n    },\n    textarea.value,\n  );\n\n  button.style.justifyContent = 'start';\n  button.style.flexDirection = 'row-reverse';\n\n  wrapper.append(button);\n})();\n","import { __, sprintf } from '@wordpress/i18n';\nimport { createElement } from 'ts-dom-utils';\nimport generateAltText from '../../utils/generateAltText';\n\nexport default (\n  imageId: number,\n  onClick: (altText: string) => void,\n  currentAlt?: string,\n) => {\n  const buttonWrapper = createElement('div', {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'end',\n      clear: 'both',\n      gap: '1em',\n    },\n  });\n\n  const spinner = createElement('span', {\n    class: 'spinner',\n    style: { margin: '0' },\n  });\n  buttonWrapper.append(spinner);\n\n  const button = createElement('button', {\n    class: 'button',\n    text: __('Generate Alt Text', 'alt-text-generator-gpt-vision'),\n    onclick: async (e) => {\n      e.preventDefault();\n      if (\n        currentAlt?.length &&\n        !confirm(\n          __(\n            'Are you sure you want to overwrite the current alt text?',\n            'alt-text-generator-gpt-vision',\n          ),\n        )\n      ) {\n        return;\n      }\n\n      try {\n        spinner.classList.add('is-active');\n        button.disabled = true;\n\n        const altText = await generateAltText(imageId);\n        onClick(altText);\n      } catch (error) {\n        alert(\n          sprintf(\n            __(\n              'There was an error generating the alt text: %s',\n              'alt-text-generator-gpt-vision',\n            ),\n            error.message,\n          ),\n        );\n      } finally {\n        spinner.classList.remove('is-active');\n        button.disabled = false;\n      }\n    },\n  });\n  buttonWrapper.append(button);\n\n  return buttonWrapper;\n};\n","import apiFetch from '@wordpress/api-fetch';\nimport { API_PATH } from '../constants';\n\nexport default async (\n  attachmentId: number,\n  save: boolean = false,\n  userPrompt?: string,\n  signal?: AbortSignal,\n) => {\n  const requestData: {\n    attachment_id: number;\n    save: boolean;\n    user_prompt?: string;\n  } = {\n    attachment_id: attachmentId,\n    save,\n  };\n\n  if (userPrompt?.length) {\n    requestData.user_prompt = userPrompt;\n  }\n\n  return apiFetch<{ alt: string; img_id: number }>({\n    path: API_PATH,\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(requestData),\n    signal,\n  })\n    .then((response) => {\n      return response.alt;\n    })\n    .catch((error) => {\n      console.error(error);\n      throw error as WPError;\n    });\n};\n","export const API_PATH = 'acpl/ai-alt-generator';\nexport const BULK_ACTION_OPTION_VALUE = 'generate_alt_text';\n"],"names":["__webpack_require__","n","e","t","document","querySelector","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","window","l","s","i","r","createElement","entries","forEach","Array","isArray","classList","add","textContent","c","setAttribute","_currentUrl$searchPar","wrapper","qs","textarea","currentUrl","URL","location","href","imageId","parseInt","searchParams","console","error","button","onClick","currentAlt","buttonWrapper","style","display","alignItems","justifyContent","clear","gap","spinner","class","margin","append","text","__","onclick","async","preventDefault","length","confirm","disabled","altText","attachmentId","save","userPrompt","signal","requestData","attachment_id","user_prompt","apiFetch","path","method","headers","body","JSON","stringify","then","response","alt","catch","generateAltText","alert","sprintf","message","remove","GenerateAltButon","value","flexDirection"],"sourceRoot":""}