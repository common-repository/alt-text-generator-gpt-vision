{"version":3,"file":"editor.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,ICAlF,MAAM,EAA+BI,OAAW,GAAS,MCAnD,EAA+BA,OAAW,GAAe,YCAzD,EAA+BA,OAAW,GAAc,WCAxD,EAA+BA,OAAW,GAAQ,KCAlD,EAA+BA,OAAW,GAAW,QCArD,EAA+BA,OAAW,GAAQ,KCAlD,EAA+BA,OAAW,GAAgB,aCA1D,EAA+BA,OAAW,GAAY,SCAtD,EAA+BA,OAAW,GAAY,S,aCArD,MCGP,QACEC,EACAC,GAAgB,EAChBC,EACAC,KAEA,MAAMC,EAIF,CACFC,cAAeL,EACfC,QAOF,OAJIC,GAAYI,SACdF,EAAYG,YAAcL,GAGrBM,IAA0C,CAC/CC,KDvBoB,wBCwBpBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUV,GACrBD,WAECY,MAAMC,GACEA,EAASC,MAEjBC,OAAOC,IAEN,MADAC,QAAQD,MAAMA,GACRA,CAAK,GAEhB,ECtCc,SAASE,EAAMC,GAC5B,OAAO,IAAIC,SAASC,GAAYC,WAAWD,EAASF,IACtD,CCFA,MAAM,EAA+BvB,OAAW,GAAc,WCAxD,EAA+BA,OAAwB,gBCY7D,GAP2B,SAAK,EAAA2B,IAAK,CACnCC,MAAO,6BACPC,QAAS,YACTC,UAAuB,SAAK,EAAAC,KAAM,CAChC9C,EAAG,wDCGP,GAP0B,SAAK,EAAA0C,IAAK,CAClCC,MAAO,6BACPC,QAAS,YACTC,UAAuB,SAAK,EAAAC,KAAM,CAChC9C,EAAG,4FCGP,GAP6B,SAAK,EAAA0C,IAAK,CACrCC,MAAO,6BACPC,QAAS,cACTC,UAAuB,SAAK,EAAAC,KAAM,CAChC9C,EAAG,oQCJQ,SAAS+C,GAAqB,QAC3CC,IAEA,MAAM,OAAEC,EAAM,QAAEC,GAAYF,EAE5B,OACEG,EAAAA,EAAAA,KAACC,EAAAA,KAAI,CAACC,QAAQ,QAAOR,SACP,eAAXI,GACCK,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAV,SAAA,EAEEM,EAAAA,EAAAA,KAACK,EAAAA,QAAO,KACPC,EAAAA,EAAAA,IACC,gBACA,oBACA,oCAGS,cAAXR,GACFK,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAV,SAAA,EACEM,EAAAA,EAAAA,KAACO,EAAAA,KAAI,CAACC,KAAMC,KACXH,EAAAA,EAAAA,IACC,YACA,oBACA,oCAGS,YAAXR,GACFK,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAV,SAAA,EACEM,EAAAA,EAAAA,KAACO,EAAAA,KAAI,CAACC,KAAME,KACXJ,EAAAA,EAAAA,IAAG,UAAW,oBAAqB,oCAEzB,UAAXR,GACFK,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAV,SAAA,EACEM,EAAAA,EAAAA,KAACO,EAAAA,KAAI,CAACC,KAAMG,KACXC,EAAAA,EAAAA,UACCN,EAAAA,EAAAA,IACE,YACA,oBACA,iCAEFP,MAGF,MAGV,CC9Ce,SAASc,GAAoB,QAC1CC,EAAO,cACPC,IAEA,OACEf,EAAAA,EAAAA,KAAA,OACEgB,MAAO,CACLC,UAAW,QACXC,UAAW,OACXC,aAAc,OACdC,OAAQ,qBACR1B,UAEFS,EAAAA,EAAAA,MAAA,SACEkB,UAAU,sCACVL,MAAO,CAAEI,OAAQ,KAAM1B,SAAA,EAEvBM,EAAAA,EAAAA,KAAA,SACEgB,MAAO,CAAEM,SAAU,SAAUC,IAAK,IAAKC,gBAAiB,SAAU9B,UAElES,EAAAA,EAAAA,MAAA,MAAAT,SAAA,EACEM,EAAAA,EAAAA,KAAA,MAAAN,UAAK+B,EAAAA,EAAAA,IAAG,OAAQ,oCAChBzB,EAAAA,EAAAA,KAAA,MAAAN,UAAK+B,EAAAA,EAAAA,IAAG,WAAY,oCACpBzB,EAAAA,EAAAA,KAAA,MAAAN,UAAK+B,EAAAA,EAAAA,IAAG,SAAU,yCAGtBzB,EAAAA,EAAAA,KAAA,SAAAN,SACIoB,EAQAY,MAAMC,KAAKZ,GAAe,EAAEa,EAAI/B,MAC9BM,EAAAA,EAAAA,MAAA,MAAAT,SAAA,EACEM,EAAAA,EAAAA,KAAA,MAAAN,UACEM,EAAAA,EAAAA,KAAA,KACE6B,KAAMhC,EAAQiC,WACdC,OAAO,SACPf,MAAO,CAAEgB,UAAW,YAAatC,UAEjCS,EAAAA,EAAAA,MAACF,EAAAA,KAAI,CAACgC,MAAM,QAAQ/B,QAAQ,QAAOR,SAAA,CAChCG,EAAQqC,YACPlC,EAAAA,EAAAA,KAAA,OACEmC,IAAKtC,EAAQqC,UAAUJ,WACvBM,OAAQvC,EAAQqC,UAAUE,OAC1BC,MAAOxC,EAAQqC,UAAUG,MACzBvD,IAAKe,EAAQf,IACbgC,QAAQ,OACRwB,SAAS,QACTtB,MAAO,CAAEuB,SAAU,OAAQH,OAAQ,UAGtCvC,EAAQ2C,cAIfxC,EAAAA,EAAAA,KAAA,MAAAN,SAAKG,EAAQf,OACbkB,EAAAA,EAAAA,KAAA,MAAAN,UACEM,EAAAA,EAAAA,KAACJ,EAAoB,CAACC,QAASA,QAzB1B+B,MARX5B,EAAAA,EAAAA,KAAA,MAAAN,UACEM,EAAAA,EAAAA,KAAA,MAAIyC,QAAS,EAAGzB,MAAO,CAAE0B,UAAW,UAAWhD,UAE7CM,EAAAA,EAAAA,KAACK,EAAAA,QAAO,cAuCxB,CCpEA,MAAMsC,GAAgBlB,EAAAA,EAAAA,IACpB,2BACA,iCAGImB,GAAenB,EAAAA,EAAAA,IACnB,qHACA,iCAGIoB,GAAsBvC,EAAAA,EAAAA,IAC1B,2CACA,gCACA,iCAGa,SAASwC,GAAoB,KAC1CC,EAAO,EAAC,MACRC,EAAQL,EAAa,KACrBM,EAAOL,EAAY,YACnBM,EAAcL,KACXM,IAEH,OACEnD,EAAAA,EAAAA,KAACoD,EAAAA,gBAAe,CACdL,KAAMA,EACNC,MAAOA,EACPC,KAAMA,EACNC,YAAaA,EACblC,MAAO,CAELqC,YAAa,UACbC,aAAc,WAEZH,GAGV,CCjCA,MAAMR,GAAgBlB,EAAAA,EAAAA,IACpB,iCACA,iCAGa,SAAS8B,GAA6B,MACnDP,EAAQL,EAAa,QACrBa,EAAO,SACPC,EAAQ,SACRC,GAAW,IAEX,OACE1D,EAAAA,EAAAA,KAAC2D,EAAAA,cAAa,CACZX,MAAOA,EACPQ,QAASA,EACTC,SAAUA,EACVR,KACEO,GACI/B,EAAAA,EAAAA,IACE,4GACA,kCAEFA,EAAAA,EAAAA,IACE,oEACA,iCAGRiC,SAAUA,GAGhB,CChBe,SAASE,GAAkB,cACxCC,EAAa,WACbC,EAAU,QACVC,EAAO,QACPC,EAAU,iBAEV,MAAOC,EAAmBC,IAAwBC,EAAAA,EAAAA,WAAS,IACpDC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,KAC1CG,EAAuBC,IAA4BJ,EAAAA,EAAAA,UAC5C,iBAAZH,IAEKQ,EAAcC,IAAmBN,EAAAA,EAAAA,WAAS,IAC3C,YAAEO,EAAW,YAAEC,GCnCR,SAAwBC,GACrC,MAAM,QAAEC,EAAO,YAAEF,EAAW,YAAEG,IAAgBC,EAAAA,EAAAA,kBAE5C,WAAY,aAAc,CAC1BC,QAASJ,EACTK,UAAW,EACXjB,QAAS,SAGX,MAAO,CAAEU,YAAaG,QAAAA,EAAW,GAAIF,cACvC,CDyBuCO,CAAerB,IAC7CsB,EAAkBC,IAAuBjB,EAAAA,EAAAA,UAC9C,IAAIkB,IAAIxB,EAAcyB,KAAK1D,GAAO,CAACA,EAAI,CAAE9B,OAAQ,GAAIhB,IAAK,SAEtDyG,GAAkBC,EAAAA,EAAAA,QAAO,IAAIC,iBA2HnC,OAzHAC,EAAAA,EAAAA,YAAU,KACHhB,EAAYvG,QAEjBiH,GAAqBO,IACnB,MAAMC,EAAS,IAAIP,IAAIM,GAmCvB,OAjCAjB,EAAYmB,SAASC,IAAe,IAAAC,EAAAC,EAClC,MAAMnG,EAAU+F,EAAOtI,IAAIwI,EAAWlE,IACtC,IAAK/B,EAKH,YAJAZ,QAAQD,MACN,8CACA8G,GAKJjG,EAAQf,IAAMgH,EAAWG,SACzBpG,EAAQ2C,OAAQ0D,EAAAA,EAAAA,gBAAeJ,EAAWtD,MAAM2D,UAChDtG,EAAQiC,WAAagE,EAAWhE,WAEhC,MAAMI,EAGiC,QAFrC6D,EACyC,QADzCC,EACAF,EAAWM,cAAcC,OAAOnE,iBAAS,IAAA8D,EAAAA,EACvCF,EAAWM,cAAcC,QAAQ,UAAE,IAAAN,EAAAA,EAAI,CACrC1D,MAAOyD,EAAWM,cAAc/D,MAChCD,OAAQ0D,EAAWM,cAAchE,OACjCN,WAAYgE,EAAWhE,YAGzBI,IACFrC,EAAQqC,UAAY,CAClBG,MAAOH,EAAUG,MACjBD,OAAQF,EAAUE,OAClBN,WAAYI,EAAUJ,aAG1B8D,EAAOU,IAAIR,EAAWlE,GAAI/B,EAAQ,IAG7B+F,CAAM,GACb,GACD,CAAClB,EAAaC,KA0EjBe,EAAAA,EAAAA,YAAU,IACD,KACLH,EAAgBgB,QAAQC,OAAO,GAEhC,KAGDrG,EAAAA,EAAAA,MAACsG,EAAAA,MAAK,CACJjE,OAAOf,EAAAA,EAAAA,IAAG,6BAA8B,iCACxCiF,eAAgB3C,EAChB4C,2BAA2B,EAC3BC,kBAAmBpC,EACnBxD,MAAO,CAAEuB,SAAU,SAAU7C,SAAA,EAE7BM,EAAAA,EAAAA,KAAC8C,EAAmB,CAClB+D,MAAOzC,EACPX,SAAUY,EACVX,SAAUc,KAGZxE,EAAAA,EAAAA,KAAC2D,EAAAA,cAAa,CACZX,OAAOvB,EAAAA,EAAAA,IACL,uCACA,iCAEFwB,KACEgB,GACIxC,EAAAA,EAAAA,IACE,wEACA,kCAEFA,EAAAA,EAAAA,IACE,oDACA,iCAGR+B,QAASS,EACTR,SAAUS,EACVR,SAAUc,IAGC,WAAZR,IACChE,EAAAA,EAAAA,KAACuD,EAA4B,CAC3BC,QAASc,EACTb,SAAUc,EACVb,SAAUc,KAIdxE,EAAAA,EAAAA,KAACa,EAAmB,CAClBC,QAAS6D,EACT5D,cAAeoE,KAGjBhF,EAAAA,EAAAA,MAACF,EAAAA,KAAI,CAAAP,SAAA,EACHM,EAAAA,EAAAA,KAAA,KAAAN,UACGkB,EAAAA,EAAAA,UACCkG,EAAAA,EAAAA,IACE,oBACA,qBACAjD,EAAc1F,OACd,iCAEF0F,EAAc1F,WAIlB6B,EAAAA,EAAAA,KAAC+G,EAAAA,SAAQ,CAAArH,UACPS,EAAAA,EAAAA,MAACF,EAAAA,KAAI,CAACC,QAAQ,MAAKR,SAAA,EACjBM,EAAAA,EAAAA,KAACgH,EAAAA,OAAM,CAACC,QAASlD,EAASmD,eAAa,EAAAxH,UACpC+B,EAAAA,EAAAA,IAAG,SAAU,oCAGhBzB,EAAAA,EAAAA,KAACgH,EAAAA,OAAM,CACLG,QAAQ,UACRzD,SAAUc,IAAiBG,EAC3ByC,OAAQ5C,EACRyC,QArJQI,UAClB5C,GAAgB,GAChB,MAAM6C,EAAgB,GAEtB,IAAK,MAAO1F,EAAI/B,KAAYsF,EAAkB,CAC5C,IAAKlB,GAAqBpE,EAAQf,IAAIX,OAAS,EAAG,CAChDiH,GACGO,GACC,IAAIN,IAAIM,EAAQW,IAAI1E,EAAI,IAAK/B,EAASC,OAAQ,eAElD,QACF,CAEAsF,GACGO,GACC,IAAIN,IAAIM,EAAQW,IAAI1E,EAAI,IAAK/B,EAASC,OAAQ,kBAGlD,MAAMyH,EAAOC,EACX5F,EACA0C,EACAF,EACAmB,EAAgBgB,QAAQvI,QAEvBY,MAAME,IACL,MAAMgH,EAAapB,EAAY+C,MAC5B3B,GAAeA,EAAWlE,KAAOA,IAEhCkE,IACFA,EAAWG,SAAWnH,GAGxBsG,GACGO,GACC,IAAIN,IACFM,EAAQW,IAAI1E,EAAI,IAAK/B,EAASf,MAAKgB,OAAQ,iBAI7CgE,GACFA,EAAW,CAAElC,KAAI9C,OACnB,IAEDC,OAAOC,IACNoG,GACGO,GACC,IAAIN,IACFM,EAAQW,IAAI1E,EAAI,IACX/B,EACHC,OAAQ,QACRC,QAASf,EAAMe,aAIvBd,QAAQD,MAAMA,EAAM,IAGxBsI,EAAcI,KAAKH,SAMbrI,EAAM,IACd,OAEME,QAAQuI,IAAIL,GAClB7C,GAAgB,GAEhBmD,SAASC,cAAc,IAAIC,YAAY,qBAAqB,EAgF7BpI,UAEpB+B,EAAAA,EAAAA,IAAG,QAAS,6CAO3B,CEnOA,UAAkBsG,eAChB,MAAOC,EAA2BC,IAChC9D,EAAAA,EAAAA,WAAS,IAEL,YAAE+D,EAAW,OAAEC,IAAWC,EAAAA,EAAAA,YAC7BC,IAAW,IAAAC,EACV,MAAMC,EAEJF,EAAOG,EAAAA,OAAkBC,SAASV,GAE9BG,EAGH,QAHcI,GACdC,GAAcL,aAAkCQ,QAC9CC,GAAyB,eAAfA,EAAMC,cAClB,IAAAN,EAAAA,EAAI,GAEDH,EAASD,EACZQ,QAAQC,GAAUA,EAAME,YAAYjH,KACpC0D,KAAKqD,GAAUA,EAAME,WAAWjH,KAEnC,MAAO,CAAE2G,eAAcL,cAAaC,SAAQ,GAE9C,CAACJ,IAGH,OACE/H,EAAAA,EAAAA,KAAC8I,EAAAA,kBAAiB,CAAApJ,UAChBM,EAAAA,EAAAA,KAAC+I,EAAAA,MAAK,CAAArJ,UACJS,EAAAA,EAAAA,MAAC6I,EAAAA,UAAS,CACRxG,OAAOf,EAAAA,EAAAA,IACL,6BACA,iCACA/B,SAAA,EAEFM,EAAAA,EAAAA,KAACgH,EAAAA,OAAM,CACLG,QAAQ,UACRF,QAASA,IAAMgB,GAA6B,GAAMvI,UAEjD+B,EAAAA,EAAAA,IAAG,6BAA8B,mCAEnCuG,IACChI,EAAAA,EAAAA,KAAC4D,EAAiB,CAChBI,QAAQ,SACRH,cAAesE,EACfpE,QAASA,IAAMkE,GAA6B,GAC5CnE,WAAYA,EAAGlC,KAAI9C,UACjB,MAAMmK,EAAaf,EAAYT,MAC5BkB,GAAUA,EAAME,WAAWjH,KAAOA,IAEhCqH,IAELC,EAAAA,EAAAA,UAASV,EAAAA,OAAkBW,sBACzBF,EAAWlB,SACX,CAAEjJ,OACH,UAQhB,EC9EK,EAA+BlB,OAAW,GAAW,QCe3D,IACEwL,QACAC,aAAa,GACbvF,aACAM,eACAE,yBAAwB,MAExB,MAAOE,EAAcC,IAAmBN,EAAAA,EAAAA,WAAS,IAC3C,oBAAEmF,EAAmB,kBAAEC,IAAsBC,EAAAA,EAAAA,aAAYC,EAAAA,OAsD/D,OACEzJ,EAAAA,EAAAA,KAACgH,EAAAA,OAAM,CACLG,QAAQ,UACRF,QAvDgBI,UAClB,IACEgC,EAAWlL,QACVuL,SACCjI,EAAAA,EAAAA,IACE,4DACA,kCAON,IACEgD,GAAgB,GAEhB,MAAM3F,QAAY0I,EAChB4B,EACA9E,EACAF,GAEFN,EAAWhF,SAELwK,GACJ7H,EAAAA,EAAAA,IAAG,6BAA8B,iCACjC,CACEkI,KAAM,WACN/H,GAAI,sBAIV,CAAE,MAAO5C,GACHA,EAAMe,eACFwJ,GACJ3I,EAAAA,EAAAA,UACEa,EAAAA,EAAAA,IACE,iDACA,iCAEFzC,EAAMe,SAER,CACE6B,GAAI,iBACJ+H,KAAM,WAId,CAAE,QACAlF,GAAgB,EAClB,GAOE2C,OAAQ5C,EACRd,SAAUc,EAAa9E,UAEtB+B,EAAAA,EAAAA,IAAG,4BAA6B,kCAGtC,EC5ED,IACEoH,aACAe,oBAKA,IAAKf,EAAWjH,GAAI,OAAO,KAE3B,MAAOwC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,KAC1CG,EAAuBC,IAA4BJ,EAAAA,EAAAA,WAAS,GAEnE,OACEnE,EAAAA,EAAAA,KAAC8I,EAAAA,kBAAiB,CAAApJ,UAChBM,EAAAA,EAAAA,KAAC+I,EAAAA,MAAK,CAAArJ,UACJS,EAAAA,EAAAA,MAAC6I,EAAAA,UAAS,CACRxG,OAAOf,EAAAA,EAAAA,IACL,6BACA,iCACA/B,SAAA,EAEFM,EAAAA,EAAAA,KAAC8C,EAAmB,CAClB+D,MAAOzC,EACPX,SAAUY,KAGZrE,EAAAA,EAAAA,KAACuD,EAA4B,CAC3BC,QAASc,EACTb,SAAUc,KAGZvE,EAAAA,EAAAA,KAAC6J,EAAiB,CAChBT,MAAOP,EAAWjH,GAClByH,WAAYR,EAAW/J,IACvBsF,aAAcA,EACdN,WAAahF,GAAQ8K,EAAc,CAAE9K,QACrCwF,sBAAuBA,UAMlC,GChBDwF,EAAAA,EAAAA,WACE,mBACA,yBAhCCC,GAA8B5G,IAC7B,MAAM,SAAE4E,EAAQ,KAAEa,EAAI,WAAEC,EAAU,cAAEe,GAAkBzG,EAKtD,MAAa,eAATyF,GAEAzI,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAV,SAAA,EACEM,EAAAA,EAAAA,KAAC+J,EAAS,IAAK5G,KACfnD,EAAAA,EAAAA,KAACgK,EAA2B,CAC1BnB,WAAYA,EACZe,cAAeA,OAMV,iBAAThB,GAEAzI,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAV,SAAA,EACEM,EAAAA,EAAAA,KAAC+J,EAAS,IAAK5G,KACfnD,EAAAA,EAAAA,KAACiK,EAA6B,CAAClC,SAAUA,QAKxC/H,EAAAA,EAAAA,KAAC+J,EAAS,IAAK5G,GAAS,GAOjC,G","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///external window [\"wp\",\"hooks\"]","webpack:///external window [\"wp\",\"blockEditor\"]","webpack:///external window [\"wp\",\"components\"]","webpack:///external window [\"wp\",\"data\"]","webpack:///external window [\"wp\",\"element\"]","webpack:///external window [\"wp\",\"i18n\"]","webpack:///external window [\"wp\",\"htmlEntities\"]","webpack:///external window [\"wp\",\"coreData\"]","webpack:///external window [\"wp\",\"apiFetch\"]","webpack:///./src/constants.ts","webpack:///./src/utils/generateAltText.ts","webpack:///./src/utils/sleep.ts","webpack:///external window [\"wp\",\"primitives\"]","webpack:///external window \"ReactJSXRuntime\"","webpack:///./node_modules/.pnpm/@wordpress+icons@10.8.0_react@18.3.1/node_modules/@wordpress/icons/build-module/library/check.js","webpack:///./node_modules/.pnpm/@wordpress+icons@10.8.0_react@18.3.1/node_modules/@wordpress/icons/build-module/library/next.js","webpack:///./node_modules/.pnpm/@wordpress+icons@10.8.0_react@18.3.1/node_modules/@wordpress/icons/build-module/library/warning.js","webpack:///./src/components/BulkGenerationStatus.tsx","webpack:///./src/components/BulkGenerationTable.tsx","webpack:///./src/components/CustomPromptControl.tsx","webpack:///./src/components/SaveAltInMediaLibraryControl.tsx","webpack:///./src/components/BulkGenerateModal.tsx","webpack:///./src/hooks/useAttachments.ts","webpack:///./src/editor/components/GalleryBlockInspectorControls.tsx","webpack:///external window [\"wp\",\"notices\"]","webpack:///./src/editor/components/GenerateAltButton.tsx","webpack:///./src/editor/components/ImageBlockInspectorControls.tsx","webpack:///./src/editor/index.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"hooks\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blockEditor\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"components\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"htmlEntities\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"coreData\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"apiFetch\"];","export const API_PATH = 'acpl/ai-alt-generator';\nexport const BULK_ACTION_OPTION_VALUE = 'generate_alt_text';\n","import apiFetch from '@wordpress/api-fetch';\nimport { API_PATH } from '../constants';\n\nexport default async (\n  attachmentId: number,\n  save: boolean = false,\n  userPrompt?: string,\n  signal?: AbortSignal,\n) => {\n  const requestData: {\n    attachment_id: number;\n    save: boolean;\n    user_prompt?: string;\n  } = {\n    attachment_id: attachmentId,\n    save,\n  };\n\n  if (userPrompt?.length) {\n    requestData.user_prompt = userPrompt;\n  }\n\n  return apiFetch<{ alt: string; img_id: number }>({\n    path: API_PATH,\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(requestData),\n    signal,\n  })\n    .then((response) => {\n      return response.alt;\n    })\n    .catch((error) => {\n      console.error(error);\n      throw error as WPError;\n    });\n};\n","export default function sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"primitives\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"ReactJSXRuntime\"];","/**\n * WordPress dependencies\n */\nimport { SVG, Path } from '@wordpress/primitives';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst check = /*#__PURE__*/_jsx(SVG, {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  viewBox: \"0 0 24 24\",\n  children: /*#__PURE__*/_jsx(Path, {\n    d: \"M16.7 7.1l-6.3 8.5-3.3-2.5-.9 1.2 4.5 3.4L17.9 8z\"\n  })\n});\nexport default check;\n//# sourceMappingURL=check.js.map","/**\n * WordPress dependencies\n */\nimport { SVG, Path } from '@wordpress/primitives';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst next = /*#__PURE__*/_jsx(SVG, {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  viewBox: \"0 0 24 24\",\n  children: /*#__PURE__*/_jsx(Path, {\n    d: \"M6.6 6L5.4 7l4.5 5-4.5 5 1.1 1 5.5-6-5.4-6zm6 0l-1.1 1 4.5 5-4.5 5 1.1 1 5.5-6-5.5-6z\"\n  })\n});\nexport default next;\n//# sourceMappingURL=next.js.map","/**\n * WordPress dependencies\n */\nimport { SVG, Path } from '@wordpress/primitives';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst warning = /*#__PURE__*/_jsx(SVG, {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  viewBox: \"-2 -2 24 24\",\n  children: /*#__PURE__*/_jsx(Path, {\n    d: \"M10 2c4.42 0 8 3.58 8 8s-3.58 8-8 8-8-3.58-8-8 3.58-8 8-8zm1.13 9.38l.35-6.46H8.52l.35 6.46h2.26zm-.09 3.36c.24-.23.37-.55.37-.96 0-.42-.12-.74-.36-.97s-.59-.35-1.06-.35-.82.12-1.07.35-.37.55-.37.97c0 .41.13.73.38.96.26.23.61.34 1.06.34s.8-.11 1.05-.34z\"\n  })\n});\nexport default warning;\n//# sourceMappingURL=warning.js.map","import { Flex, Icon, Spinner } from '@wordpress/components';\nimport { _x, sprintf } from '@wordpress/i18n';\nimport { check, next, warning } from '@wordpress/icons';\nimport type { AltGenerationDetails } from '../types';\n\nexport default function BulkGenerationStatus({\n  details,\n}: BulkGenerationStatusProps) {\n  const { status, message } = details;\n\n  return (\n    <Flex justify=\"start\">\n      {status === 'generating' ? (\n        <>\n          {/* @ts-ignore - wrong Spinner prop types */}\n          <Spinner />\n          {_x(\n            'Generating...',\n            'Generation status',\n            'alt-text-generator-gpt-vision',\n          )}\n        </>\n      ) : status === 'generated' ? (\n        <>\n          <Icon icon={check} />\n          {_x(\n            'Generated',\n            'Generation status',\n            'alt-text-generator-gpt-vision',\n          )}\n        </>\n      ) : status === 'skipped' ? (\n        <>\n          <Icon icon={next} />\n          {_x('Skipped', 'Generation status', 'alt-text-generator-gpt-vision')}\n        </>\n      ) : status === 'error' ? (\n        <>\n          <Icon icon={warning} />\n          {sprintf(\n            _x(\n              'Error: %s',\n              'Generation status',\n              'alt-text-generator-gpt-vision',\n            ),\n            message,\n          )}\n        </>\n      ) : null}\n    </Flex>\n  );\n}\n\nexport type BulkGenerationStatusProps = {\n  details: AltGenerationDetails;\n};\n","import { Flex, Spinner } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\nimport type { AltGenerationMap } from '../types';\nimport BulkGenerationStatus from './BulkGenerationStatus';\n\nexport default function BulkGenerationTable({\n  loading,\n  generationMap,\n}: BulkGenerationStatusTableProps) {\n  return (\n    <div\n      style={{\n        maxHeight: '18rem',\n        overflowY: 'auto',\n        marginBottom: '1rem',\n        border: '1px solid #c3c4c7',\n      }}\n    >\n      <table\n        className=\"wp-list-table fixed widefat striped\"\n        style={{ border: '0' }}\n      >\n        <thead\n          style={{ position: 'sticky', top: '0', backgroundColor: 'white' }}\n        >\n          <tr>\n            <th>{__('File', 'alt-text-generator-gpt-vision')}</th>\n            <th>{__('Alt text', 'alt-text-generator-gpt-vision')}</th>\n            <th>{__('Status', 'alt-text-generator-gpt-vision')}</th>\n          </tr>\n        </thead>\n        <tbody>\n          {!loading ? (\n            <tr>\n              <td colSpan={3} style={{ textAlign: 'center' }}>\n                {/* @ts-ignore - wrong prop types */}\n                <Spinner />\n              </td>\n            </tr>\n          ) : (\n            Array.from(generationMap, ([id, details]) => (\n              <tr key={id}>\n                <td>\n                  <a\n                    href={details.source_url}\n                    target=\"_blank\"\n                    style={{ lineBreak: 'anywhere' }}\n                  >\n                    <Flex align=\"start\" justify=\"start\">\n                      {details.thumbnail && (\n                        <img\n                          src={details.thumbnail.source_url}\n                          height={details.thumbnail.height}\n                          width={details.thumbnail.width}\n                          alt={details.alt}\n                          loading=\"lazy\"\n                          decoding=\"async\"\n                          style={{ maxWidth: '60px', height: 'auto' }}\n                        />\n                      )}\n                      {details.title}\n                    </Flex>\n                  </a>\n                </td>\n                <td>{details.alt}</td>\n                <td>\n                  <BulkGenerationStatus details={details} />\n                </td>\n              </tr>\n            ))\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport interface BulkGenerationStatusTableProps {\n  generationMap: AltGenerationMap;\n  loading: boolean;\n}\n","import { TextareaControl } from '@wordpress/components';\nimport { __, _x } from '@wordpress/i18n';\nimport type { ComponentProps } from 'react';\n\ninterface AdditionalPromptControlProps\n  extends ComponentProps<typeof TextareaControl> {}\n\nconst DEFAULT_LABEL = __(\n  'Custom prompt (optional)',\n  'alt-text-generator-gpt-vision',\n);\n\nconst DEFAULT_HELP = __(\n  'Provide custom instructions for AI to tailor the alt text generation, such as including specific keywords for SEO.',\n  'alt-text-generator-gpt-vision',\n);\n\nconst DEFAULT_PLACEHOLDER = _x(\n  'e.g. Include terms like \"AI\", \"robotics\"',\n  'Additional prompt placeholder',\n  'alt-text-generator-gpt-vision',\n);\n\nexport default function CustomPromptControl({\n  rows = 1,\n  label = DEFAULT_LABEL,\n  help = DEFAULT_HELP,\n  placeholder = DEFAULT_PLACEHOLDER,\n  ...props\n}: AdditionalPromptControlProps) {\n  return (\n    <TextareaControl\n      rows={rows}\n      label={label}\n      help={help}\n      placeholder={placeholder}\n      style={{\n        // @ts-ignore - missing types for fieldSizing\n        fieldSizing: 'content',\n        maxBlockSize: '6rlh',\n      }}\n      {...props}\n    />\n  );\n}\n","import { ToggleControl } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\nimport { ComponentProps } from 'react';\n\ninterface SaveAltInMediaLibraryControlProps {\n  label?: string;\n  checked: ComponentProps<typeof ToggleControl>['checked'];\n  onChange: ComponentProps<typeof ToggleControl>['onChange'];\n  disabled?: ComponentProps<typeof ToggleControl>['disabled'];\n}\n\nconst DEFAULT_LABEL = __(\n  'Save alt text in media library',\n  'alt-text-generator-gpt-vision',\n);\n\nexport default function SaveAltInMediaLibraryControl({\n  label = DEFAULT_LABEL,\n  checked,\n  onChange,\n  disabled = false,\n}: SaveAltInMediaLibraryControlProps) {\n  return (\n    <ToggleControl\n      label={label}\n      checked={checked}\n      onChange={onChange}\n      help={\n        checked\n          ? __(\n              'Alternative text will be saved in the WordPress media library, making it available for reuse across site.',\n              'alt-text-generator-gpt-vision',\n            )\n          : __(\n              'Alternative text will only be saved for the current editor block.',\n              'alt-text-generator-gpt-vision',\n            )\n      }\n      disabled={disabled}\n    />\n  );\n}\n","import {\n  Button,\n  Flex,\n  FlexItem,\n  Modal,\n  ToggleControl,\n} from '@wordpress/components';\nimport { useEffect, useRef, useState } from '@wordpress/element';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { __, _n, sprintf } from '@wordpress/i18n';\nimport useAttachments from '../hooks/useAttachments';\nimport { AltGenerationMap, GenerationContext } from '../types';\nimport generateAltText from '../utils/generateAltText';\nimport sleep from '../utils/sleep';\nimport BulkGenerationTable from './BulkGenerationTable';\nimport CustomPromptControl from './CustomPromptControl';\nimport SaveAltInMediaLibraryControl from './SaveAltInMediaLibraryControl';\n\nexport interface BulkGenerateModalProps {\n  attachmentIds: number[];\n  onGenerate?: ({ id, alt }: { id: number; alt: string }) => void;\n  onClose: () => void;\n  context?: GenerationContext;\n}\n\nexport default function BulkGenerateModal({\n  attachmentIds,\n  onGenerate,\n  onClose,\n  context = 'mediaLibrary',\n}: BulkGenerateModalProps) {\n  const [overwriteExisting, setOverwriteExisting] = useState(false);\n  const [customPrompt, setCustomPrompt] = useState('');\n  const [saveAltInMediaLibrary, setSaveAltInMediaLibrary] = useState(\n    context === 'mediaLibrary',\n  );\n  const [isGenerating, setIsGenerating] = useState(false);\n  const { attachments, hasResolved } = useAttachments(attachmentIds);\n  const [altGenerationMap, setAltGenerationMap] = useState<AltGenerationMap>(\n    new Map(attachmentIds.map((id) => [id, { status: '', alt: '' }])),\n  );\n  const abortController = useRef(new AbortController());\n\n  useEffect(() => {\n    if (!attachments.length) return;\n\n    setAltGenerationMap((prevMap) => {\n      const newMap = new Map(prevMap);\n\n      attachments.forEach((attachment) => {\n        const details = newMap.get(attachment.id);\n        if (!details) {\n          console.error(\n            'Generation details not found for attachment',\n            attachment,\n          );\n          return;\n        }\n\n        details.alt = attachment.alt_text;\n        details.title = decodeEntities(attachment.title.rendered);\n        details.source_url = attachment.source_url;\n\n        const thumbnail =\n          //@ts-ignore - missing WP types\n          attachment.media_details.sizes?.thumbnail ??\n            attachment.media_details.sizes?.[0] ?? {\n              width: attachment.media_details.width,\n              height: attachment.media_details.height,\n              source_url: attachment.source_url,\n            };\n\n        if (thumbnail)\n          details.thumbnail = {\n            width: thumbnail.width,\n            height: thumbnail.height,\n            source_url: thumbnail.source_url,\n          };\n\n        newMap.set(attachment.id, details);\n      });\n\n      return newMap;\n    });\n  }, [attachments, hasResolved]);\n\n  const handleStart = async () => {\n    setIsGenerating(true);\n    const generateTasks = [];\n\n    for (const [id, details] of altGenerationMap) {\n      if (!overwriteExisting && details.alt.length > 0) {\n        setAltGenerationMap(\n          (prevMap) =>\n            new Map(prevMap.set(id, { ...details, status: 'skipped' })),\n        );\n        continue;\n      }\n\n      setAltGenerationMap(\n        (prevMap) =>\n          new Map(prevMap.set(id, { ...details, status: 'generating' })),\n      );\n\n      const task = generateAltText(\n        id,\n        saveAltInMediaLibrary,\n        customPrompt,\n        abortController.current.signal,\n      )\n        .then((alt) => {\n          const attachment = attachments.find(\n            (attachment) => attachment.id === id,\n          );\n          if (attachment) {\n            attachment.alt_text = alt;\n          }\n\n          setAltGenerationMap(\n            (prevMap) =>\n              new Map(\n                prevMap.set(id, { ...details, alt, status: 'generated' }),\n              ),\n          );\n\n          if (onGenerate) {\n            onGenerate({ id, alt });\n          }\n        })\n        .catch((error) => {\n          setAltGenerationMap(\n            (prevMap) =>\n              new Map(\n                prevMap.set(id, {\n                  ...details,\n                  status: 'error',\n                  message: error.message,\n                }),\n              ),\n          );\n          console.error(error);\n        });\n\n      generateTasks.push(task);\n\n      // Wait for 1 second before processing the next image to avoid too many requests at once\n      // TODO:\n      //  Use rate limiting info and implement a better solution\n      //  https://platform.openai.com/docs/guides/rate-limits/rate-limits-in-headers\n      await sleep(1000);\n    }\n\n    await Promise.all(generateTasks);\n    setIsGenerating(false);\n\n    document.dispatchEvent(new CustomEvent('altTextsGenerated'));\n  };\n\n  useEffect(() => {\n    return () => {\n      abortController.current.abort();\n    };\n  }, []);\n\n  return (\n    <Modal\n      title={__('Generate Alternative Texts', 'alt-text-generator-gpt-vision')}\n      onRequestClose={onClose}\n      shouldCloseOnClickOutside={false}\n      shouldCloseOnEsc={!isGenerating}\n      style={{ maxWidth: '48rem' }}\n    >\n      <CustomPromptControl\n        value={customPrompt}\n        onChange={setCustomPrompt}\n        disabled={isGenerating}\n      />\n\n      <ToggleControl\n        label={__(\n          'Overwrite existing alternative texts',\n          'alt-text-generator-gpt-vision',\n        )}\n        help={\n          overwriteExisting\n            ? __(\n                'The existing alternative texts will be overwritten with the new ones.',\n                'alt-text-generator-gpt-vision',\n              )\n            : __(\n                'The existing alternative texts will be preserved.',\n                'alt-text-generator-gpt-vision',\n              )\n        }\n        checked={overwriteExisting}\n        onChange={setOverwriteExisting}\n        disabled={isGenerating}\n      />\n\n      {context === 'editor' && (\n        <SaveAltInMediaLibraryControl\n          checked={saveAltInMediaLibrary}\n          onChange={setSaveAltInMediaLibrary}\n          disabled={isGenerating}\n        />\n      )}\n\n      <BulkGenerationTable\n        loading={hasResolved}\n        generationMap={altGenerationMap}\n      />\n\n      <Flex>\n        <p>\n          {sprintf(\n            _n(\n              '%d image selected',\n              '%d images selected',\n              attachmentIds.length,\n              'alt-text-generator-gpt-vision',\n            ),\n            attachmentIds.length,\n          )}\n        </p>\n\n        <FlexItem>\n          <Flex justify=\"end\">\n            <Button onClick={onClose} isDestructive>\n              {__('Cancel', 'alt-text-generator-gpt-vision')}\n            </Button>\n\n            <Button\n              variant=\"primary\"\n              disabled={isGenerating || !hasResolved}\n              isBusy={isGenerating}\n              onClick={handleStart}\n            >\n              {__('Start', 'alt-text-generator-gpt-vision')}\n            </Button>\n          </Flex>\n        </FlexItem>\n      </Flex>\n    </Modal>\n  );\n}\n","import { type Attachment, useEntityRecords } from '@wordpress/core-data';\n\nexport default function useAttachments(ids: number[]) {\n  const { records, hasResolved, isResolving } = useEntityRecords<\n    Attachment<'view'>\n  >('postType', 'attachment', {\n    include: ids,\n    per_page: -1,\n    context: 'view',\n  });\n\n  return { attachments: records ?? [], hasResolved };\n}\n","import {\n  InspectorControls,\n  store as blockEditorStore,\n} from '@wordpress/block-editor';\nimport { Button, Panel, PanelBody } from '@wordpress/components';\nimport { dispatch, useSelect } from '@wordpress/data';\nimport { useState } from '@wordpress/element';\nimport { __ } from '@wordpress/i18n';\nimport BulkGenerateModal from '../../components/BulkGenerateModal';\n\ninterface GalleryBlockInspectorControlsProps {\n  clientId: string;\n}\n\n/**\n * Add bulk alt generation panel to gallery block settings.\n */\nexport default ({ clientId }: GalleryBlockInspectorControlsProps) => {\n  const [isBulkGenerationModalOpen, setIsBulkGenerationModalOpen] =\n    useState(false);\n\n  const { innerBlocks, imgIds } = useSelect(\n    (select) => {\n      const galleryBlock: GalleryBlockProps =\n        // @ts-ignore - missing types\n        select(blockEditorStore).getBlock(clientId);\n\n      const innerBlocks =\n        (galleryBlock?.innerBlocks as ImageBlockProps[]).filter(\n          (block) => block.name === 'core/image',\n        ) ?? [];\n\n      const imgIds = innerBlocks\n        .filter((block) => block.attributes?.id)\n        .map((block) => block.attributes.id);\n\n      return { galleryBlock, innerBlocks, imgIds };\n    },\n    [clientId],\n  );\n\n  return (\n    <InspectorControls>\n      <Panel>\n        <PanelBody\n          title={__(\n            'Alternative Text Generator',\n            'alt-text-generator-gpt-vision',\n          )}\n        >\n          <Button\n            variant=\"primary\"\n            onClick={() => setIsBulkGenerationModalOpen(true)}\n          >\n            {__('Generate alternative texts', 'alt-text-generator-gpt-vision')}\n          </Button>\n          {isBulkGenerationModalOpen && (\n            <BulkGenerateModal\n              context=\"editor\"\n              attachmentIds={imgIds}\n              onClose={() => setIsBulkGenerationModalOpen(false)}\n              onGenerate={({ id, alt }) => {\n                const imageBlock = innerBlocks.find(\n                  (block) => block.attributes.id === id,\n                );\n                if (!imageBlock) return;\n                // @ts-ignore - missing types\n                dispatch(blockEditorStore).updateBlockAttributes(\n                  imageBlock.clientId,\n                  { alt },\n                );\n              }}\n            />\n          )}\n        </PanelBody>\n      </Panel>\n    </InspectorControls>\n  );\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"notices\"];","import { Button } from '@wordpress/components';\nimport { useDispatch } from '@wordpress/data';\nimport { useState } from '@wordpress/element';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { store as noticesStore } from '@wordpress/notices';\nimport generateAltText from '../../utils/generateAltText';\n\ninterface GenerateAltButtonProps {\n  imgId: number;\n  currentAlt?: string;\n  onGenerate: (alt: string) => void;\n  customPrompt?: string;\n  saveAltInMediaLibrary?: boolean;\n}\n\nexport default ({\n  imgId,\n  currentAlt = '',\n  onGenerate,\n  customPrompt,\n  saveAltInMediaLibrary = false,\n}: GenerateAltButtonProps) => {\n  const [isGenerating, setIsGenerating] = useState(false);\n  const { createSuccessNotice, createErrorNotice } = useDispatch(noticesStore);\n\n  const handleClick = async () => {\n    if (\n      currentAlt.length &&\n      !confirm(\n        __(\n          'Are you sure you want to overwrite the existing alt text?',\n          'alt-text-generator-gpt-vision',\n        ),\n      )\n    ) {\n      return;\n    }\n\n    try {\n      setIsGenerating(true);\n\n      const alt = await generateAltText(\n        imgId,\n        saveAltInMediaLibrary,\n        customPrompt,\n      );\n      onGenerate(alt);\n\n      await createSuccessNotice(\n        __('Alternative text generated', 'alt-text-generator-gpt-vision'),\n        {\n          type: 'snackbar',\n          id: 'alt-text-generated',\n        },\n      );\n      //@ts-ignore\n    } catch (error: WPError) {\n      if (error.message) {\n        await createErrorNotice(\n          sprintf(\n            __(\n              'There was an error generating the alt text: %s',\n              'alt-text-generator-gpt-vision',\n            ),\n            error.message,\n          ),\n          {\n            id: 'alt-text-error',\n            type: 'default',\n          },\n        );\n      }\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  return (\n    <Button\n      variant=\"primary\"\n      onClick={handleClick}\n      isBusy={isGenerating}\n      disabled={isGenerating}\n    >\n      {__('Generate alternative text', 'alt-text-generator-gpt-vision')}\n    </Button>\n  );\n};\n","import { InspectorControls } from '@wordpress/block-editor';\nimport { Panel, PanelBody } from '@wordpress/components';\nimport { useState } from '@wordpress/element';\nimport { __ } from '@wordpress/i18n';\nimport CustomPromptControl from '../../components/CustomPromptControl';\nimport SaveAltInMediaLibraryControl from '../../components/SaveAltInMediaLibraryControl';\nimport GenerateAltButton from './GenerateAltButton';\n\n/**\n * Add alt generation panel to image block settings.\n */\nexport default ({\n  attributes,\n  setAttributes,\n}: {\n  attributes: ImageBlockAttrs;\n  setAttributes: ImageBlockProps['setAttributes'];\n}) => {\n  if (!attributes.id) return null;\n\n  const [customPrompt, setCustomPrompt] = useState('');\n  const [saveAltInMediaLibrary, setSaveAltInMediaLibrary] = useState(false);\n\n  return (\n    <InspectorControls>\n      <Panel>\n        <PanelBody\n          title={__(\n            'Alternative Text Generator',\n            'alt-text-generator-gpt-vision',\n          )}\n        >\n          <CustomPromptControl\n            value={customPrompt}\n            onChange={setCustomPrompt}\n          />\n\n          <SaveAltInMediaLibraryControl\n            checked={saveAltInMediaLibrary}\n            onChange={setSaveAltInMediaLibrary}\n          />\n\n          <GenerateAltButton\n            imgId={attributes.id}\n            currentAlt={attributes.alt}\n            customPrompt={customPrompt}\n            onGenerate={(alt) => setAttributes({ alt })}\n            saveAltInMediaLibrary={saveAltInMediaLibrary}\n          />\n        </PanelBody>\n      </Panel>\n    </InspectorControls>\n  );\n};\n","import { type BlockEdit } from '@wordpress/block-editor';\nimport { addFilter } from '@wordpress/hooks';\nimport type { ComponentType } from 'react';\nimport GalleryBlockInspectorControls from './components/GalleryBlockInspectorControls';\nimport ImageBlockInspectorControls from './components/ImageBlockInspectorControls';\n\nconst withGenerateAltButton =\n  (BlockEdit: ComponentType) => (props: BlockEdit.Props) => {\n    const { clientId, name, attributes, setAttributes } = props as\n      | BlockProps<'*', any>\n      | ImageBlockProps\n      | GalleryBlockProps;\n\n    if (name === 'core/image') {\n      return (\n        <>\n          <BlockEdit {...props} />\n          <ImageBlockInspectorControls\n            attributes={attributes}\n            setAttributes={setAttributes}\n          />\n        </>\n      );\n    }\n\n    if (name === 'core/gallery') {\n      return (\n        <>\n          <BlockEdit {...props} />\n          <GalleryBlockInspectorControls clientId={clientId} />\n        </>\n      );\n    }\n\n    return <BlockEdit {...props} />;\n  };\n\naddFilter(\n  'editor.BlockEdit',\n  'acpl/ai-alt-generator',\n  withGenerateAltButton,\n  20,\n);\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","window","attachmentId","save","userPrompt","signal","requestData","attachment_id","length","user_prompt","apiFetch","path","method","headers","body","JSON","stringify","then","response","alt","catch","error","console","sleep","ms","Promise","resolve","setTimeout","SVG","xmlns","viewBox","children","Path","BulkGenerationStatus","details","status","message","_jsx","Flex","justify","_jsxs","_Fragment","Spinner","_x","Icon","icon","check","next","warning","sprintf","BulkGenerationTable","loading","generationMap","style","maxHeight","overflowY","marginBottom","border","className","position","top","backgroundColor","__","Array","from","id","href","source_url","target","lineBreak","align","thumbnail","src","height","width","decoding","maxWidth","title","colSpan","textAlign","DEFAULT_LABEL","DEFAULT_HELP","DEFAULT_PLACEHOLDER","CustomPromptControl","rows","label","help","placeholder","props","TextareaControl","fieldSizing","maxBlockSize","SaveAltInMediaLibraryControl","checked","onChange","disabled","ToggleControl","BulkGenerateModal","attachmentIds","onGenerate","onClose","context","overwriteExisting","setOverwriteExisting","useState","customPrompt","setCustomPrompt","saveAltInMediaLibrary","setSaveAltInMediaLibrary","isGenerating","setIsGenerating","attachments","hasResolved","ids","records","isResolving","useEntityRecords","include","per_page","useAttachments","altGenerationMap","setAltGenerationMap","Map","map","abortController","useRef","AbortController","useEffect","prevMap","newMap","forEach","attachment","_ref","_attachment$media_det","alt_text","decodeEntities","rendered","media_details","sizes","set","current","abort","Modal","onRequestClose","shouldCloseOnClickOutside","shouldCloseOnEsc","value","_n","FlexItem","Button","onClick","isDestructive","variant","isBusy","async","generateTasks","task","generateAltText","find","push","all","document","dispatchEvent","CustomEvent","clientId","isBulkGenerationModalOpen","setIsBulkGenerationModalOpen","innerBlocks","imgIds","useSelect","select","_filter","galleryBlock","blockEditorStore","getBlock","filter","block","name","attributes","InspectorControls","Panel","PanelBody","imageBlock","dispatch","updateBlockAttributes","imgId","currentAlt","createSuccessNotice","createErrorNotice","useDispatch","noticesStore","confirm","type","setAttributes","GenerateAltButton","addFilter","BlockEdit","ImageBlockInspectorControls","GalleryBlockInspectorControls"],"sourceRoot":""}